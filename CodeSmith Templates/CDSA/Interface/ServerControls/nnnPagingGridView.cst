<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="False" Description="" src="../../../CSLib.vb" %>
<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Category="Context" Description="" %>
<%@ Property Name="RootNs" Type="System.String" Default="" Optional="False" Category="Namespace" Description="The root namespace that will link all the layers." %>
<%@ Property Name="Ns" Type="System.String" Default="" Optional="True" Category="Namespace" Description="An optional namespace string to include." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
using System.Collections.Generic;
using System;

<%
dim formattedTableName as string=CSLib.GetFormattedName(Table.Name)

if Ns<>"" then
%>
namespace <%=RootNs%>.UI.<%=Ns & "."%>ServerControls
<%
else
%>
namespace <%=RootNs%>.UI.ServerControls
<%
end if
%>
{
	public class <%=formattedTableName%>PagingGridView : ControlExtensions.WebControlExtensions.GridViewExtensions.CustomPagingGridView
    {
        [System.ComponentModel.Browsable(false)]
        public ClauseWrappers.WhereClauseWrapper.WhereClause WhereClause
        {
            get
            {
                if(ViewState["WhereClause"] == null) ViewState["WhereClause"] = new ClauseWrappers.WhereClauseWrapper.WhereClause();
                return (ClauseWrappers.WhereClauseWrapper.WhereClause)ViewState["WhereClause"];
            }
            set
            {
                ViewState["WhereClause"] = value;
            }
        }

        public void BindGrid()
        {
            ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy = new ClauseWrappers.OrderByClauseWrapper.OrderByClause();

            

            //work out the orderBy from the current expression
            if (base.SortExpression != "")
            {
                if (base.SortExpression.Contains(",")) {
                    string[] exprs = base.SortExpression.Split(',');

                    foreach (string expr in exprs)
                    {
                        ClauseWrappers.OrderByClauseWrapper.OrderByClauseElement myOrderByClauseElem = new ClauseWrappers.OrderByClauseWrapper.OrderByClauseElement();
						
						if(expr.Contains(" ") && (expr.ToUpper().EndsWith("ASC") || expr.ToUpper().EndsWith("DESC")))
						{
                            myOrderByClauseElem.FieldName = BLL.SchemaCatalog.GetFieldNameByPropertyName(BLL.SchemaCatalog.CurrentProviderSchemas.<%=formattedTableName%>Schema, expr.Split(' ')[0]);

                            switch(expr.ToUpper().Split(' ')[1])
							{
                                case "ASC":
                                    myOrderByClauseElem.Direction = ClauseWrappers.OrderByClauseWrapper.Direction.Ascending;
									break;
                                case "DESC":
                                    myOrderByClauseElem.Direction = ClauseWrappers.OrderByClauseWrapper.Direction.Descending;
									break;
                            }
						}
                        else
						{
                            myOrderByClauseElem.FieldName = BLL.SchemaCatalog.GetFieldNameByPropertyName(BLL.SchemaCatalog.CurrentProviderSchemas.<%=formattedTableName%>Schema, expr);

                            switch(base.SortDirection)
							{
								case System.Web.UI.WebControls.SortDirection.Ascending:
									myOrderByClauseElem.Direction = ClauseWrappers.OrderByClauseWrapper.Direction.Ascending;
									break;
								case System.Web.UI.WebControls.SortDirection.Descending:
									myOrderByClauseElem.Direction = ClauseWrappers.OrderByClauseWrapper.Direction.Descending;
									break;
							}
                        }
						
                        

                        orderBy.ClauseList.Add(myOrderByClauseElem);

                    }
                } else {
                    ClauseWrappers.OrderByClauseWrapper.OrderByClauseElement myOrderByClauseElem = new ClauseWrappers.OrderByClauseWrapper.OrderByClauseElement();
                    myOrderByClauseElem.FieldName = BLL.SchemaCatalog.GetFieldNameByPropertyName(BLL.SchemaCatalog.CurrentProviderSchemas.<%=formattedTableName%>Schema, base.SortExpression);

                    switch(base.SortDirection)
                    {
                        case System.Web.UI.WebControls.SortDirection.Ascending:
                            myOrderByClauseElem.Direction = ClauseWrappers.OrderByClauseWrapper.Direction.Ascending;
                            break;
                        case System.Web.UI.WebControls.SortDirection.Descending:
                            myOrderByClauseElem.Direction = ClauseWrappers.OrderByClauseWrapper.Direction.Descending;
                            break;
                    }

                    orderBy.ClauseList.Add(myOrderByClauseElem);
                }
            }


            //bind it
            int virtItemCount;
            List<DDL.DTOs.<%=formattedTableName%>> results = BLL.Management.<%=formattedTableName%>Manager.GetInstance().GetRecords(WhereClause, orderBy, base.PageIndex + 1, base.PageSize, out virtItemCount);

            base.VirtualItemCount = virtItemCount;
            base.DataSource = results;
            base.DataBind();
            
        }

        public <%=formattedTableName%>PagingGridView()
        {
            base.DataKeyNames = new string[] { "UniqueId" };
            base.AutoGenerateColumns = false;
            base.AllowPaging = true;
            base.AllowSorting = true;
        }

        //Handle the paging/sorting events internally to save coding on the page
        protected override void OnPageIndexChanging(System.Web.UI.WebControls.GridViewPageEventArgs e)
        {
            e.Cancel = true;
            base.OnPageIndexChanging(e);

            //save the new page index
            base.PageIndex = e.NewPageIndex;

            BindGrid();
			OnPageIndexChanged(EventArgs.Empty);
        }

        protected override void OnSorting(System.Web.UI.WebControls.GridViewSortEventArgs e)
        {
            e.Cancel = true;
            base.OnSorting(e);

            //save the new sort options
            base.SortExpression = e.SortExpression;
            base.SortDirection = e.SortDirection;

            BindGrid();
			OnSorted(EventArgs.Empty);
        }
    }
}