<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="False" Description="" src="../../../../CSLib.vb" %>
<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Category="Context" Description="" %>
<%@ Property Name="RootNs" Type="System.String" Default="" Optional="False" Category="Namespace" Description="The root namespace that will link all the layers." %>
<%@ Property Name="Ns" Type="System.String" Default="" Optional="True" Category="Namespace" Description="An optional namespace string to include." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
using System.Collections.Generic;
using System.Linq;

namespace <%=RootNs%>.BLL<%= IIf(Ns<>"", "." & Ns, "") %>.Management.BaseClasses
{
    <%
    dim formattedTableName as string=CSLib.GetFormattedName(Table.Name)
    %>
    public abstract partial class <%=formattedTableName%>ManagerBase
    {
        protected <%=formattedTableName%>ManagerBase()
        {
        }

        public DDL.Definitions.Schemas.I<%=formattedTableName%>Schema Schema
        {
            get { return SchemaCatalog.CurrentProviderSchemas.<%=formattedTableName%>Schema; }
        }

        public virtual void Validate(DDL.DTOs.<%=formattedTableName%> data)
        {
            // no validation in the base class
        }

        <% 
        dim pk_dataType as string="int"
        If Table.HasPrimaryKey then
            pk_dataType=CSLib.GetTypeName(Table.PrimaryKey.MemberColumns.Item(0).SystemType,Table.PrimaryKey.MemberColumns.Item(0).AllowDBNull)
        end if
        %>
        public DDL.DTOs.<%=formattedTableName%> GetRecord(<%=pk_dataType%> id)
        {
            // use caching on single item gets
            DDL.Definitions.IRecordData result = Services.Caching.GetFromCache(this.Schema.DataContainerName, id.ToString());

            if (result == null)
            {
                result = DataProviders.Current.ManagerFactory(this.Schema).GetDataById(id);
                Services.Caching.AddToCache(this.Schema.DataContainerName, result);
            }

            return (DDL.DTOs.<%=formattedTableName%>)result;
        }

        public List<DDL.DTOs.<%=formattedTableName%>> GetRecords()
        {
            return this.GetRecords(null);
        }

        public List<DDL.DTOs.<%=formattedTableName%>> GetRecords(ClauseWrappers.WhereClauseWrapper.WhereClause where)
        {
            return this.GetRecords(where, null);
        }

        public List<DDL.DTOs.<%=formattedTableName%>> GetRecords(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy)
        {
            return DataProviders.Current.ManagerFactory(this.Schema).GetData(@where, orderBy).Cast<DDL.DTOs.<%=formattedTableName%>>().ToList();
        }

        public List<DDL.DTOs.<%=formattedTableName%>> GetRecords(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize, out int totalRecords)
        {
            return DataProviders.Current.ManagerFactory(this.Schema).GetData(@where, orderBy, pageNumber, pageSize, out totalRecords).Cast<DDL.DTOs.<%=formattedTableName%>>().ToList();
        }

        public List<DDL.DTOs.<%=formattedTableName%>> GetRecords(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize)
        {
            return DataProviders.Current.ManagerFactory(this.Schema).GetData(@where, orderBy, pageNumber, pageSize).Cast<DDL.DTOs.<%=formattedTableName%>>().ToList();
        }

        public List<<%=pk_dataType%>> GetRecordIDs()
        {
            return this.GetRecordIDs(null);
        }

        public List<<%=pk_dataType%>> GetRecordIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where)
        {
            return this.GetRecordIDs(where, null);
        }

        public List<<%=pk_dataType%>> GetRecordIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy)
        {
            return DataProviders.Current.ManagerFactory(this.Schema).GetDataIDs(@where, orderBy).Cast<<%=pk_dataType%>>().ToList();
        }

        public List<<%=pk_dataType%>> GetRecordIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize, out int totalRecords)
        {
            return DataProviders.Current.ManagerFactory(this.Schema).GetDataIDs(@where, orderBy, pageNumber, pageSize, out totalRecords).Cast<<%=pk_dataType%>>().ToList();
        }

        public List<<%=pk_dataType%>> GetRecordIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize)
        {
            return DataProviders.Current.ManagerFactory(this.Schema).GetDataIDs(@where, orderBy, pageNumber, pageSize).Cast<<%=pk_dataType%>>().ToList();
        }

        public virtual void DeleteRecord(<%=pk_dataType%> id)
        {
            DataProviders.Current.ManagerFactory(this.Schema).DeleteData(new ClauseWrappers.WhereClauseWrapper.WhereClause(this.Schema.UniqueId, ClauseWrappers.WhereClauseWrapper.Operator.Equals, id));
            Services.Caching.RemoveFromCache(this.Schema.DataContainerName, id.ToString());
        }

        public virtual void SaveRecord(DDL.DTOs.<%=formattedTableName%> data)
        {
            if (data != null)
            {
                this.Validate(data);
                data.UniqueId = DataProviders.Current.ManagerFactory(this.Schema).SaveData(data);

                // be sure to keep the cache updated
                Services.Caching.AddToCache(this.Schema.DataContainerName, data);
            }
        }
    }
}