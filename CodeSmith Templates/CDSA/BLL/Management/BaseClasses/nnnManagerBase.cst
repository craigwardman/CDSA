<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="False" Description="" src="../../../../CSLib.vb" %>
<%@ Property Name="Table" Type="SchemaExplorer.TableSchema" Category="Context" Description="" %>
<%@ Property Name="RootNs" Type="System.String" Default="" Optional="False" Category="Namespace" Description="The root namespace that will link all the layers." %>
<%@ Property Name="Ns" Type="System.String" Default="" Optional="True" Category="Namespace" Description="An optional namespace string to include." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
using System.Collections.Generic;
using System.Linq;

namespace <%=RootNs%>.BLL
{
	<%
	dim formattedTableName as string=CSLib.GetFormattedName(Table.Name)
	
	if Ns<>"" then
	%>
	namespace <%=Ns & "."%>Management.BaseClasses
	<%
	else
	%>
	namespace Management.BaseClasses
	<%
	end if
	%>
	{
		public abstract partial class <%=formattedTableName%>ManagerBase
		{
			public DDL.Definitions.Schemas.I<%=formattedTableName%>Schema Schema
			{
				get { return SchemaCatalog.CurrentProviderSchemas.<%=formattedTableName%>Schema; }
			}
			
			protected <%=formattedTableName%>ManagerBase()
			{
	
			}
	
			public virtual void Validate(DDL.DTOs.<%=formattedTableName%> data)
			{
				//no validation in the base class
			}
	
			<% 
			dim pk_dataType as string="int"
			If Table.HasPrimaryKey then
				pk_dataType=CSLib.GetTypeName(Table.PrimaryKey.MemberColumns.Item(0).SystemType,Table.PrimaryKey.MemberColumns.Item(0).AllowDBNull)
			end if
			%>
			public DDL.DTOs.<%=formattedTableName%> GetRecord(<%=pk_dataType%> id)
			{
				//use caching on single item gets
                DDL.Definitions.IRecordData result = Services.Caching.GetFromCache(Schema.DataContainerName, id.ToString());
                
                if (result == null)
                {
                    result = DataProviders.Current.ManagerFactory(Schema).GetDataById(id);
                    Services.Caching.AddToCache(Schema.DataContainerName, result);
                }

				return (DDL.DTOs.<%=formattedTableName%>)result;
			}
			
			public List<DDL.DTOs.<%=formattedTableName%>> GetRecords()
			{
				return GetRecords(null);
			}
	
			public List<DDL.DTOs.<%=formattedTableName%>> GetRecords(ClauseWrappers.WhereClauseWrapper.WhereClause where)
			{
				return GetRecords(where, null);
			}
	
			public List<DDL.DTOs.<%=formattedTableName%>> GetRecords(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy)
			{
				return DataProviders.Current.ManagerFactory(Schema).GetData(@where, orderBy).Cast<DDL.DTOs.<%=formattedTableName%>>().ToList();
			}
	
			public List<DDL.DTOs.<%=formattedTableName%>> GetRecords(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize, out int totalRecords)
			{
				return DataProviders.Current.ManagerFactory(Schema).GetData(@where, orderBy, pageNumber, pageSize, out totalRecords).Cast<DDL.DTOs.<%=formattedTableName%>>().ToList();
			}
			
			public List<DDL.DTOs.<%=formattedTableName%>> GetRecords(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize)
			{
				return DataProviders.Current.ManagerFactory(Schema).GetData(@where, orderBy, pageNumber, pageSize).Cast<DDL.DTOs.<%=formattedTableName%>>().ToList();
			}
			
			public List<int> GetRecordIDs()
			{
				return GetRecordIDs(null);
			}
	
			public List<int> GetRecordIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where)
			{
				return GetRecordIDs(where, null);
			}
	
			public List<int> GetRecordIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy)
			{
				return DataProviders.Current.ManagerFactory(Schema).GetDataIDs(@where, orderBy).Cast<int>().ToList();
			}
	
			public List<int> GetRecordIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize, out int totalRecords)
			{
				return DataProviders.Current.ManagerFactory(Schema).GetDataIDs(@where, orderBy, pageNumber, pageSize, out totalRecords).Cast<int>().ToList();
			}
			
			public List<int> GetRecordIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize)
			{
				return DataProviders.Current.ManagerFactory(Schema).GetDataIDs(@where, orderBy, pageNumber, pageSize).Cast<int>().ToList();
			}
	
			public virtual void DeleteRecord(<%=pk_dataType%> id)
			{
				DataProviders.Current.ManagerFactory(Schema).DeleteData(new ClauseWrappers.WhereClauseWrapper.WhereClause(Schema.UniqueId, ClauseWrappers.WhereClauseWrapper.Operator.Equals, id));
				Services.Caching.RemoveFromCache(Schema.DataContainerName, id.ToString());
			}
		
			public virtual void SaveRecord(DDL.DTOs.<%=formattedTableName%> data)
			{
				if (data != null)
                {
					Validate(data);
					data.UniqueId = DataProviders.Current.ManagerFactory(Schema).SaveData(data);

                    //be sure to keep the cache updated
                    Services.Caching.AddToCache(Schema.DataContainerName, data);
				}
			}
		}
	
	}
}