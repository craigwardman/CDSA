<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="False" Description="" %>
<%@ Property Name="RootNs" Type="System.String" Default="" Optional="False" Category="Namespace" Description="The root namespace that will link all the layers." %>
<%@ Property Name="Ns" Type="System.String" Default="" Optional="True" Category="Namespace" Description="An optional namespace string to include." %>
namespace <%=RootNs%>.BLL<%= IIf(Ns<>"", "." & Ns, "") %>.Services
{
    internal static class Caching
    {
        // how many objects to keep in the cache
        private const int CacheSize = 1000;

        private static bool enabled = true;

        // memory backed cache (shared amongst all items)
        private static System.Collections.Hashtable cache = new System.Collections.Hashtable(CacheSize);

        public static bool Enabled
        {
            get { return Caching.enabled; }
            set { Caching.enabled = value; }
        }

        // expose a function to completely wipe the cache
        public static void InvalidateCache()
        {
            lock (cache.SyncRoot)
            {
                cache.Clear();
            }
        }

        // public accessors
        public static DDL.Definitions.IRecordData GetFromCache(string dataContainerName, string dataUniqueId)
        {
            if (Enabled)
            {
                return GetFromCache(dataContainerName + "-" + dataUniqueId);
            }
            else
            {
                return null;
            }
        }

        public static void AddToCache(string dataContainerName, DDL.Definitions.IRecordData data)
        {
            if (Enabled)
            {
                if (data != null)
                {
                    AddToCacheInternal(dataContainerName + "-" + data.UniqueId, data);
                }
            }
        }

        public static void RemoveFromCache(string dataContainerName, string dataUniqueId)
        {
            if (Enabled)
            {
                RemoveFromCache(dataContainerName + "-" + dataUniqueId);
            }
        }

        // get something from the cache
        private static DDL.Definitions.IRecordData GetFromCache(string key)
        {
            CacheItem cacheResult = null;

            lock (cache.SyncRoot)
            {
                // if its in the cache, we can return it, but also keep it up to date
                cacheResult = (CacheItem)cache[key];

                if (cacheResult != null)
                {
                    cacheResult.Touch();
                    return cacheResult.Data;
                }
                else
                {
                    return null;
                }
            }
        }

        // adding to the cache adds or updates the timestamp
        private static void AddToCacheInternal(string key, DDL.Definitions.IRecordData data)
        {
            if (data != null)
            {
                lock (cache.SyncRoot)
                {
                    if (cache.ContainsKey(key))
                    {
                        // already exists, update the timestamp and data
                        ((CacheItem)cache[key]).Touch(data);
                    }
                    else
                    {
                        // we are adding a new item, if this will overflow the cache, then remove the oldest item
                        if (cache.Count >= CacheSize)
                        {
                            // find the oldest member
                            CacheItem oldestItem = null;
                            foreach (CacheItem itm in cache.Values)
                            {
                                if (oldestItem == null || itm.Timestamp < oldestItem.Timestamp)
                                {
                                    oldestItem = itm;
                                }
                            }

                            cache.Remove(oldestItem.Key);
                        }

                        cache.Add(key, new CacheItem(key, data));
                    }
                }
            }
        }

        private static void RemoveFromCache(string key)
        {
            lock (cache.SyncRoot)
            {
                // remove any entries for this item
                cache.Remove(key);
            }
        }

        private class CacheItem
        {
            public CacheItem(string key, DDL.Definitions.IRecordData data)
            {
                this.Key = key;
                this.Data = data;
                this.Touch();
            }

            public DDL.Definitions.IRecordData Data
            {
                get;
                private set;
            }

            public long Timestamp
            {
                get;
                private set;
            }

            public string Key
            {
                get;
                private set;
            }

            public void Touch(DDL.Definitions.IRecordData latestData)
            {
                this.Touch();
                this.Data = latestData;
            }

            public void Touch()
            {
                this.Timestamp = System.DateTime.Now.Ticks;
            }
        }
    }
}