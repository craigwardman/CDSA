<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="False" Description="" %>
<%@ Property Name="RootNs" Type="System.String" Default="" Optional="False" Category="Namespace" Description="The root namespace that will link all the layers." %>
<%@ Property Name="Ns" Type="System.String" Default="" Optional="True" Category="Namespace" Description="An optional namespace string to include." %>
using System;
using System.Collections.Generic;

namespace <%=RootNs%>.BLL<%= IIf(Ns<>"", "." & Ns, "") %>
{
    [Serializable]
    public class EntityValidationException : Exception
    {
        public readonly List<EntityValidationFault> Faults;

        public EntityValidationException(List<EntityValidationFault> faults) : 
            base("Entity validation failed. See the faults list for more details")
        {
            this.Faults = faults;
        }

        [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand, SerializationFormatter = true)]
        protected EntityValidationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
            base(info, context)
        {
            this.Faults = info.GetValue("Faults", typeof(List<EntityValidationFault>)) as List<EntityValidationFault>;
        }

        [System.Security.Permissions.SecurityPermission(System.Security.Permissions.SecurityAction.Demand, SerializationFormatter = true)]
        public override void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
        {
            info.AddValue("Faults", this.Faults, typeof(List<EntityValidationFault>));

            base.GetObjectData(info, context);
        }
    }

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Really don't want another file for this, but don't want to nest it either, due to backward compatibility.")]
    [Serializable]
    public class EntityValidationFault
    {
        private string faultDataName;
        private string faultDescription;
    
        public EntityValidationFault(string faultDataName, string faultDescription)
        {
            this.faultDataName = faultDataName;
            this.faultDescription = faultDescription;
        }
        
        public string FaultDataName 
        {
            get
            {
                return this.faultDataName;
            }
        }
        
        public string FaultDescription
        {
            get
            {
                return this.faultDescription;
            }
        }
    }
}