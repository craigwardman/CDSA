<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="False" Description="" %>
<%@ Property Name="IdentityTypeName" Type="System.String" Default="System.Int32" Optional="False" Category="Options" Description="Write the type of the ID, e.g. System.Int32, System.Int64 or System.Guid" %>
<%@ Property Name="RootNs" Type="System.String" Default="" Optional="False" Category="Namespace" Description="The root namespace that will link all the layers." %>
<%@ Property Name="Ns" Type="System.String" Default="" Optional="True" Category="Namespace" Description="An optional namespace string to include." %>
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace <%=RootNs%>.SQLDAL<%= IIf(Ns<>"", "." & Ns, "") %>.Management
{
    public partial class SqlDataManager : DML.Management.DataManagerBase
    {
        private SqlHelper.SqlHelper helper;

        public SqlDataManager(SqlHelper.SqlHelper helperInstance, DDL.Definitions.Schemas.ISchemaBase targetSchema) : 
                base(targetSchema)
        {
            this.helper = helperInstance;
        }

        public override DDL.Definitions.IRecordData GetDataById(<%= IdentityTypeName %> id)
        {
            // get a single record using its ID
            DataSet rawData = this.helper.Select(this.DataSchema.DataContainerName, "*", (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(this.GetIdClause(id)));

            if (rawData != null && rawData.Tables.Count > 0 && rawData.Tables[0].Rows.Count > 0)
            {
                return Data.DataFactory.CreateDataInstance(this.DataSchema, rawData.Tables[0].Rows[0]);
            }
            else
            {
                return null;
            }
        }
        
        public override List<DDL.Definitions.IRecordData> GetData()
        {
            return this.GetData(null);
        }

        public override List<DDL.Definitions.IRecordData> GetData(ClauseWrappers.WhereClauseWrapper.WhereClause where)
        {
            return this.GetData(where, null);
        }
        
        public override List<DDL.Definitions.IRecordData> GetData(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy)
        {
            // this version is only doing basic select so it can use the data reader version
            List<DDL.Definitions.IRecordData> results = new List<DDL.Definitions.IRecordData>();

            // get multiple records, matching the where clause
            SqlCommand selectCommand = this.helper.GetSelectCommand(DataSchema.DataContainerName, "*", (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(where), (SqlHelper.SqlClauses.SqlOrderByClause)this.helper.ParseOrderByClause(orderBy), -1, -1, false);

            // now execute the command and for each row we will create a data instance
            this.helper.ExecuteReader(
                selectCommand, 
                null, 
                dr =>
                {
                    results.Add(Data.DataFactory.CreateDataInstance(this.DataSchema, dr));
                });

            return results;
        }
        
        public override List<DDL.Definitions.IRecordData> GetData(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize)
        {
            // to use paging, an orderBy clause MUST be specified, if we have received null, then order by the primary key
            if (orderBy == null || orderBy.ClauseList.Count == 0)
            {
                orderBy = new ClauseWrappers.OrderByClauseWrapper.OrderByClause(DataSchema.UniqueId, ClauseWrappers.OrderByClauseWrapper.Direction.Ascending);
            }

            DataSet rawData = this.helper.Select(DataSchema.DataContainerName, "*", (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(where), (SqlHelper.SqlClauses.SqlOrderByClause)this.helper.ParseOrderByClause(orderBy), pageNumber, pageSize, false);

            if (rawData != null && rawData.Tables.Count > 0)
            {
                return Data.DataFactory.CreateDataInstances(this.DataSchema, rawData.Tables[0]);
            }
            else
            {
                return new List<DDL.Definitions.IRecordData>();
            }
        }

        public override List<DDL.Definitions.IRecordData> GetData(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize, out int totalRecords)
        {
            // to use paging, an orderBy clause MUST be specified, if we have received null, then order by the primary key
            if (orderBy == null || orderBy.ClauseList.Count == 0)
            {
                orderBy = new ClauseWrappers.OrderByClauseWrapper.OrderByClause(DataSchema.UniqueId, ClauseWrappers.OrderByClauseWrapper.Direction.Ascending);
            }
        
            // get multiple records,paged, matching the where clause
            DataSet rawData = this.helper.Select(DataSchema.DataContainerName, "*", (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(where), (SqlHelper.SqlClauses.SqlOrderByClause)this.helper.ParseOrderByClause(orderBy), pageNumber, pageSize);

            List<DDL.Definitions.IRecordData> results = new List<DDL.Definitions.IRecordData>();

            if (pageSize > 0 && pageNumber > 0)
            {
                // two tables returned for paged call, results + total row count
                if (rawData != null && rawData.Tables.Count > 1)
                {
                    results = Data.DataFactory.CreateDataInstances(this.DataSchema, rawData.Tables[0]);
                    totalRecords = (int)rawData.Tables[1].Rows[0][0];
                }
                else
                {
                    totalRecords = 0;
                }
            }
            else
            {
                // no paging was used - only 1 table
                if (rawData != null && rawData.Tables.Count > 0)
                {
                    results = Data.DataFactory.CreateDataInstances(this.DataSchema, rawData.Tables[0]);
                    totalRecords = results.Count;
                }
                else
                {
                    totalRecords = 0;
                }
            }

            return results;
        }
        
        public override List<<%= IdentityTypeName %>> GetDataIDs()
        {
            return this.GetDataIDs(null);
        }

        public override List<<%= IdentityTypeName %>> GetDataIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where)
        {
            return this.GetDataIDs(where, null);
        }

        public override List<<%= IdentityTypeName %>> GetDataIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy)
        {
            // get multiple records, matching the where clause
            DataSet rawData = this.helper.Select(DataSchema.DataContainerName, this.DataSchema.DataContainerName + "." + DataSchema.UniqueId, (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(where), (SqlHelper.SqlClauses.SqlOrderByClause)this.helper.ParseOrderByClause(orderBy));

            List<<%= IdentityTypeName %>> results = new List<<%= IdentityTypeName %>>();

            if (rawData != null && rawData.Tables.Count > 0)
            {
                foreach (DataRow dr in rawData.Tables[0].Rows)
                {
                    results.Add((<%= IdentityTypeName %>)dr[this.DataSchema.UniqueId]);
                }
            }

            return results;
        }
        
        public override List<<%= IdentityTypeName %>> GetDataIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize)
        {
            // to use paging, an orderBy clause MUST be specified, if we have received null, then order by the primary key
            if (orderBy == null || orderBy.ClauseList.Count == 0)
            {
                orderBy = new ClauseWrappers.OrderByClauseWrapper.OrderByClause(this.DataSchema.UniqueId, ClauseWrappers.OrderByClauseWrapper.Direction.Ascending);
            }

            DataSet rawData = this.helper.Select(this.DataSchema.DataContainerName, this.DataSchema.UniqueId, (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(where), (SqlHelper.SqlClauses.SqlOrderByClause)this.helper.ParseOrderByClause(orderBy), pageNumber, pageSize, false);

            List<<%= IdentityTypeName %>> results = new List<<%= IdentityTypeName %>>();

            if (rawData != null && rawData.Tables.Count > 0)
            {
                foreach (DataRow dr in rawData.Tables[0].Rows)
                {
                    results.Add((<%= IdentityTypeName %>)dr[this.DataSchema.UniqueId]);
                }
            }

            return results;
        }

        public override List<<%= IdentityTypeName %>> GetDataIDs(ClauseWrappers.WhereClauseWrapper.WhereClause where, ClauseWrappers.OrderByClauseWrapper.OrderByClause orderBy, int pageNumber, int pageSize, out int totalRecords)
        {
            // to use paging, an orderBy clause MUST be specified, if we have received null, then order by the primary key
            if (orderBy == null || orderBy.ClauseList.Count == 0)
            {
                orderBy = new ClauseWrappers.OrderByClauseWrapper.OrderByClause(DataSchema.UniqueId, ClauseWrappers.OrderByClauseWrapper.Direction.Ascending);
            }
        
            // get multiple records,paged, matching the where clause
            DataSet rawData = this.helper.Select(this.DataSchema.DataContainerName, this.DataSchema.UniqueId, (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(where), (SqlHelper.SqlClauses.SqlOrderByClause)this.helper.ParseOrderByClause(orderBy), pageNumber, pageSize);

            List<<%= IdentityTypeName %>> results = new List<<%= IdentityTypeName %>>();

            if (pageSize > 0 && pageNumber > 0)
            {
                // two tables returned for paged call, results + total row count
                if (rawData != null && rawData.Tables.Count > 1)
                {
                    foreach (DataRow dr in rawData.Tables[0].Rows)
                    {
                        results.Add((<%= IdentityTypeName %>)dr[this.DataSchema.UniqueId]);
                    }

                    totalRecords = (int)rawData.Tables[1].Rows[0][0];
                }
                else
                {
                    totalRecords = 0;
                }
            }
            else
            {
                // no paging was used - only 1 table
                if (rawData != null && rawData.Tables.Count > 0)
                {
                    foreach (DataRow dr in rawData.Tables[0].Rows)
                    {
                        results.Add((<%= IdentityTypeName %>)dr[this.DataSchema.UniqueId]);
                    }

                    totalRecords = results.Count;
                }
                else
                {
                    totalRecords = 0;
                }
            }

            return results;
        }

        public override void DeleteData(ClauseWrappers.WhereClauseWrapper.WhereClause where)
        {
            // delete records using the where clause
            this.helper.Delete(this.DataSchema.DataContainerName, (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(where));
        }

        public override <%= IdentityTypeName %> SaveData(DDL.Definitions.IRecordData data)
        {
            if (data.UniqueId <%= IIf(IdentityTypeName="System.Guid", "!= System.Guid.Empty", "> 0") %>)
            {
                // update record by id
                this.helper.Update(this.DataSchema.DataContainerName, Data.DataFactory.GetNameValuePairs(data), (SqlHelper.SqlClauses.SqlWhereClause)this.helper.ParseWhereClause(GetIdClause(data.UniqueId)));
                return data.UniqueId;
            }
            else
            {
                // insert it
                return this.helper.Insert<%= IIf(IdentityTypeName="System.Guid", "Guid", "") %>(this.DataSchema.DataContainerName, Data.DataFactory.GetNameValuePairs(data));
            }
        }
    }
}
