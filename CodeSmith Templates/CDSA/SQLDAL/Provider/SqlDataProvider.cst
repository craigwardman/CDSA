<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="False" Description="" src="../../../CSLib.vb" %>
<%@ Property Name="RootNs" Type="System.String" Default="" Optional="False" Category="Namespace" Description="The root namespace that will link all the layers." %>
<%@ Property Name="Ns" Type="System.String" Default="" Optional="True" Category="Namespace" Description="An optional namespace string to include." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
using System;
using System.Collections.Generic;

namespace <%=RootNs%>.SQLDAL
{
	
	<%
	if Ns<>"" then
	%>
	namespace <%=Ns & "."%>Provider
	<%
	else
	%>
	namespace Provider
	<%
	end if
	%>
	{
		public partial class SqlDataProvider : DML.Provider.IDataProvider
		{
	
			//helper
			internal readonly SqlHelper.SqlHelper sqlHelper;
	
			//data managers can be cached
			private Dictionary<DDL.Definitions.Schemas.ISchemaBase, Management.SqlDataManager> _dataManagerCache = new Dictionary<DDL.Definitions.Schemas.ISchemaBase, Management.SqlDataManager>();
	
			private SqlSchemaCatalog _sqlSchemaCatalogue = new SqlSchemaCatalog();
	
			//ctor
			public SqlDataProvider(string connectionString)
			{
				sqlHelper = new SqlHelper.SqlHelper(connectionString);
			}
	
			#region IDataProvider Members
	
			public bool IsValid()
			{
                return (sqlHelper != null && sqlHelper.IsValidConnection());
			}
	
			public DML.Management.DataManagerBase ManagerFactory(DDL.Definitions.Schemas.ISchemaBase targetSchema)
			{
				//only load the manager for this schema if is not in the cache
				if (!_dataManagerCache.ContainsKey(targetSchema))
				{
					//load the correct manager
                    try
                    {
                        _dataManagerCache.Add(targetSchema, new Management.SqlDataManager(sqlHelper, targetSchema));
                    }
                    catch (NullReferenceException)
                    {
                        //try again
                        return ManagerFactory(targetSchema);
                    }
                    catch (ArgumentException) { }
                    
				}

	
				//return the instance
				return _dataManagerCache[targetSchema];
			}
	
			public DDL.Definitions.ISchemaCatalog SchemaCatalog
			{
				get { return _sqlSchemaCatalogue; }
			}
	
	
			#endregion
	
			#region IWhereClauseHandler Members
	
			public object ParseWhereClause(ClauseWrappers.WhereClauseWrapper.WhereClause clause)
			{
				if (this.IsValid())
				{
					return this.sqlHelper.ParseWhereClause(clause);
				}
				else
				{
					return null;
				}
			}
	
			#endregion
	
			#region IOrderByClauseHandler Members
	
			public object ParseOrderByClause(ClauseWrappers.OrderByClauseWrapper.OrderByClause clause)
			{
				if (this.IsValid())
				{
					return this.sqlHelper.ParseOrderByClause(clause);
				}
				else
				{
					return null;
				}
			}
	
			#endregion
	
			
		}
	}
}