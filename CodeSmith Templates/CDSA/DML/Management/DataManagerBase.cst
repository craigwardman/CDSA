<%@ CodeTemplate Language="VB" TargetLanguage="Text" Debug="False" Description="" %>
<%@ Property Name="IdentityTypeName" Type="System.String" Default="System.Int32" Optional="False" Category="Options" Description="Write the type of the ID, e.g. System.Int32, System.Int64 or System.Guid" %>
<%@ Property Name="RootNs" Type="System.String" Default="" Optional="False" Category="Namespace" Description="The root namespace that will link all the layers." %>
<%@ Property Name="Ns" Type="System.String" Default="" Optional="True" Category="Namespace" Description="An optional namespace string to include." %>
using ClauseWrappers.WhereClauseWrapper;
using ClauseWrappers.OrderByClauseWrapper;
using System.Collections.Generic;

namespace <%=RootNs%>.DML<%= IIf(Ns<>"", "." & Ns, "") %>.Management
{
    /// <summary>
    /// This is the base class for all data management operations
    /// </summary>
    public abstract partial class DataManagerBase
    {
        /// <summary>
        /// Gets the schema of the data for the current manager
        /// </summary>
        public readonly DDL.Definitions.Schemas.ISchemaBase DataSchema;
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DataManagerBase" /> class.
        /// </summary>
        /// <param name="schema">The schema of the data you will be managing</param>
        public DataManagerBase(DDL.Definitions.Schemas.ISchemaBase schema)
        {
            this.DataSchema = schema;
        }

        // define the abstract functionality

        // get
        public abstract DDL.Definitions.IRecordData GetDataById(<%= IdentityTypeName %> id);
        public abstract List<DDL.Definitions.IRecordData> GetData();
        public abstract List<DDL.Definitions.IRecordData> GetData(WhereClause where);
        public abstract List<DDL.Definitions.IRecordData> GetData(WhereClause where, OrderByClause orderBy);
        public abstract List<DDL.Definitions.IRecordData> GetData(WhereClause where, OrderByClause orderBy, int pageNumber, int pageSize);
        public abstract List<DDL.Definitions.IRecordData> GetData(WhereClause where, OrderByClause orderBy, int pageNumber, int pageSize, out int totalRecords);

        // ID only
        public abstract List<<%= IdentityTypeName %>> GetDataIDs();
        public abstract List<<%= IdentityTypeName %>> GetDataIDs(WhereClause where);
        public abstract List<<%= IdentityTypeName %>> GetDataIDs(WhereClause where, OrderByClause orderBy);
        public abstract List<<%= IdentityTypeName %>> GetDataIDs(WhereClause where, OrderByClause orderBy, int pageNumber, int pageSize);
        public abstract List<<%= IdentityTypeName %>> GetDataIDs(WhereClause where, OrderByClause orderBy, int pageNumber, int pageSize, out int totalRecords);

        // delete
        public abstract void DeleteData(WhereClause where);

        // create / update
        
         /// <summary>
        /// Persist the data to the data store
        /// </summary>
        /// <param name="data">The data to be persisted</param>
        /// <returns>The unique ID of the record affected</returns>
        public abstract <%= IdentityTypeName %> SaveData(DDL.Definitions.IRecordData data);
        
        protected WhereClause GetIdClause(<%= IdentityTypeName %> id)
        {
            // use the ID column of the current schema
            return new WhereClause(this.DataSchema.UniqueId, Operator.Equals, id);
        }
    }
}
